exports[`test bar.js 1`] = `
"// @flow

var o = require(\'./unknown\');
o.x.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
var o = require(\"./unknown\");
o.x.;
"
`;

exports[`test bool.js 1`] = `
"// @flow

true.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
true.;
"
`;

exports[`test customfun.js 1`] = `
"// @flow

declare var idx: $Facebookism$Idx;
declare var merge: $Facebookism$Merge;
declare var mergeDeepInto: $Facebookism$MergeDeepInto;
declare var mergeInto: $Facebookism$MergeInto;
declare var mixin: $Facebookism$Mixin;
declare var objectGetPrototypeOf: Object$GetPrototypeOf
declare var objectAssign: Object$Assign

m
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
declare var idx: $Facebookism$Idx;
declare var merge: $Facebookism$Merge;
declare var mergeDeepInto: $Facebookism$MergeDeepInto;
declare var mergeInto: $Facebookism$MergeInto;
declare var mixin: $Facebookism$Mixin;
declare var objectGetPrototypeOf: Object$GetPrototypeOf;
declare var objectAssign: Object$Assign;
m;
"
`;

exports[`test foo.js 1`] = `
"/**
 * @flow
 */

var obj = {
  num: 123,
  str: \'hello\',
};

obj.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 * @flow
 */
var obj = { num: 123, str: \"hello\" };
obj.;
"
`;

exports[`test foo_parse_fail.js 1`] = `
"/**
 * @flow
 */

var obj = {
  num: 123,
  str: \'hello\',
};

console.log(obj.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 * @flow
 */
var obj = { num: 123, str: \"hello\" };
console.log(obj.);
"
`;

exports[`test fun.js 1`] = `
"/* @flow */

function foo(f: () => number) {
  f.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
function foo(f: () => number) {
  f.};
}
"
`;

exports[`test function_builtins.js 1`] = `
"/* @flow */

function foo(f: Function) {
  f.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
function foo(f: Function) {
  f.};
}
"
`;

exports[`test generics.js 1`] = `
"// @flow

class C<X> { }

function foo(o: { cn: C<number> }) {
  o.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
class C<X> {}
function foo(o: { cn: C<number> }) {
  o.};
}
"
`;

exports[`test if.js 1`] = `
"// @flow
const x = \'\';
if (x.)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
const x = \"\";
if (x.))
  
"
`;

exports[`test issue-1368.js 1`] = `
"/* @flow */
class Test {
  prop: number;

  constructor(prop: number) {
    this.prop = prop;
  }
}

class ExtendTest extends Test {
  extended: string;

  constructor(extended: string) {
    super(10);
    this.extended = extended;
  }

  method() {
    this.prop = 12;
    this./* here */
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
/* here */
class Test {
  prop: number;
  constructor(prop: number) {
    this.prop = prop;
  }
}
class ExtendTest extends Test {
  extended: string;
  constructor(extended: string) {
    super(10);
    this.extended = extended;
  }
  method() {
    this.prop = 12;
    this.};
  }
}
"
`;

exports[`test jsx1.js 1`] = `
"// @flow

var React = require(\'react\');

class C extends React.Component {
  props: { x: number };
}
<C 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
var React = require(\"react\");
class C extends React.Component {
  props: { x: number };
}
<C>;
"
`;

exports[`test jsx2.js 1`] = `
"// @flow

var React = require(\'react\');

class C extends React.Component {
  props: { x: number, y: string };
}
<C x = 0, 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
var React = require(\"react\");
class C extends React.Component {
  props: { x: number, y: string };
}
<C x=\"\" 0 ,>;
"
`;

exports[`test num.js 1`] = `
"// @flow

var num = 123;
num.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
var num = 123;
num.;
"
`;

exports[`test object_builtins.js 1`] = `
"/* @flow */

function foo(o: Object) {
  o.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
function foo(o: Object) {
  o.};
}
"
`;

exports[`test optional.js 1`] = `
"// @flow

function foo(obj: { x?: string, f: (x?: string) => void, o: { x?: string } }) {
  return obj.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
function foo(
  obj: { x?: string, f: : (x?: string) => void, o: { x?: string } }
) {
  return obj.};
}
"
`;

exports[`test override.js 1`] = `
"// @flow

class C {
  override(): number | string { return 0; }
}

class D extends C {
  foo() { return this.override() }
  override(): string { return \"\"; }
  bar() { this.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
class C {
  override(): number | string {
    return 0;
  }
}
class D extends C {
  foo() {
    return this.override();
  }
  override(): string {
    return \"\";
  }
  bar() {
    this.;
  }
}
"
`;

exports[`test qux.js 1`] = `
"// @flow

class C { x: number; }

var c: C = new C;
c.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
class C {
  x: number;
}
var c: C = new C();
c.;
"
`;

exports[`test str.js 1`] = `
"// @flow

\"hello\".
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
\"hello\".;
"
`;

exports[`test this.js 1`] = `
"/* @flow */

// issue #1197
class Foo {
  baz: string;
  bar() {}
  hello() {
    this.
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
// issue #1197
class Foo {
  baz: string;
  bar() {
    
  }
  hello() {
    this.};
  }
}
"
`;

exports[`test typeparams.js 1`] = `
"// @flow

class Bounds<N: number, F: () => N> {
  foo: F;
  bar() {
    this.foo().
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
class Bounds<N: number, F: () => N> {
  foo: F;
  bar() {
    this.foo().};
  }
}
"
`;

exports[`test union.js 1`] = `
"/* @flow */

function foo(a: boolean, x: { bar: string }, y: Object) {
  var z;
  if (a) {
    z = x;
  } else {
    z = y;
  }
  z.
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
function foo(a: boolean, x: { bar: string }, y: Object) {
  var z;
  if (a) {
    z = x;
  } else {
    z = y;
  }
  z.};
}
"
`;

exports[`test unknown.js 1`] = `
"// @noflow
module.exports = { x: { y: \"\" } };
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @noflow
module.exports = { x: { y: \"\" } };
"
`;
