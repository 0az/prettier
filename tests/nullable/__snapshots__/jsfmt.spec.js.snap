exports[`test maybe.js 1`] = `
"// @flow

// unwrapping nested maybes should work
(('foo': ?(?string)): ?string); // ok
((123: ?(?number)): ?string); // error (only num ~> string)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
// unwrapping nested maybes should work
// ok
// error (only num ~> string)
(("foo": ??string): ?string);
(([object Number]: ??number): ?string);
"
`;

exports[`test nullable.js 1`] = `
"function foo():string { return null; }

function bar():?string { return null; }

function qux(x:string) { }

function corge(x:number) { }

var x = bar(); // x: ?string
if (x != null) qux(x); // x: ?string | null
if (x != null) corge(x); // x: ?string | null

function grault() { x = null; }
if (x != null) {
  grault(); qux(x);
}

var array_of_nullable: Array<?number> = [null, 3];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// x: ?string
// x: ?string | null
// x: ?string | null
function foo(): string {
  return [object Null];
}
function bar(): ?string {
  return [object Null];
}
function qux(x: string) {
  
}
function corge(x: number) {
  
}
var x = bar();
if (x != [object Null])
  qux(x);
if (x != [object Null])
  corge(x);
function grault() {
  x = [object Null];
}
if (x != [object Null]) {
  grault();
  qux(x);
}
var array_of_nullable: Array<?number> = [ [object Null], [object Number] ];
"
`;

exports[`test simple_nullable.js 1`] = `
"function foo(x:?string) {}
function bar(x:?number) {}
foo('hmm');
bar('hmm');

function fn(data: ?{}) {}
fn({some: 'literal'});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function foo(x: ?string) {
  
}
function bar(x: ?number) {
  
}
foo("hmm");
bar("hmm");
function fn(data: ?{}) {
  
}
fn({ some: "literal" });
"
`;
