exports[`test test.js 1`] = `
"type Key1 = 'foo' | 'bar'; // make an enum type with known key set
var o1: {[key: Key1]: number} = {
  foo: 0,
  bar: "", // error: string ~/~ number
};
o1.foo; // OK
o1.qux; // error: qux not found
o1.toString(); // ok

type R = {foo: any, bar: any};
type Key2 = $Keys<R>; // another way to make an enum type, with unknown key set
var o2: {[key: Key2]: number} = { foo: 0 }; // OK to leave out bar
o2.bar; // OK to access bar
o2.qux; // error: qux not found

class C<X> {
  x: $Subtype<{[key: $Keys<X>]: any}>; // object with larger key set than X's
}
class D extends C<{foo: number, bar: string}> {
  x: { foo: number, qux: boolean }; // error: qux not found
}

type AnyKey = $Keys<Object>;
var o3: {[key: AnyKey]: number} = { foo: 0 };
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// make an enum type with known key set
// error: string ~/~ number
// OK
// error: qux not found
// ok
// another way to make an enum type, with unknown key set
// OK to leave out bar
// OK to access bar
// error: qux not found
// object with larger key set than X's
// error: qux not found
type Key1 = "foo" | "bar";
var o1: { [key: Key1]: number } = { foo: 0, bar: "" };
o1.foo;
o1.qux;
o1.toString();
type R = { foo: any; bar: any };
type Key2 = $Keys<R>;
var o2: { [key: Key2]: number } = { foo: 0 };
o2.bar;
o2.qux;
class C<X> {
  x: $Subtype<{ [key: $Keys<X>]: any }>;
}
class D extends C<{ foo: number; bar: string }> {
  x: { foo: number; qux: boolean };
}
type AnyKey = $Keys<Object>;
var o3: { [key: AnyKey]: number } = { foo: 0 };
"
`;
