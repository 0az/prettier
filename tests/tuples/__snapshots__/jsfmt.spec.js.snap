exports[`test array.js 1`] = `
"// @flow

function foo(x: Array<number>): [number, ?number] {
  return x; // Error, can\'t enforce arity when flowing array to tuple
}

function foo(x: Array<number>): [number, ?number] {
  return [x[0], x[1]]; // OK. This is unsound, but at least arity is enforced
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
// Error, can\'t enforce arity when flowing array to tuple
// OK. This is unsound, but at least arity is enforced
function foo(x: Array<number>): [number, ?number] {
  return x;
}
function foo(x: Array<number>): [number, ?number] {
  return [ x[0], x[1] ];
}
"
`;

exports[`test optional.js 1`] = `
"// @flow

([0, undefined]: [number, ?string]); // Ok, correct arity
([0]: [number, ?string]); // Error, arity is enforced

([]: [?number, string]); // error, since second element is not marked optional
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
// Ok, correct arity
// Error, arity is enforced
// error, since second element is not marked optional
([ 0, undefined ]: [number, ?string]);
([ 0 ]: [number, ?string]);
([  ]: [?number, string]);
"
`;

exports[`test too-few.js 1`] = `
"/* @flow */

function foo(a: [Object, Object]) {}

foo([ {} ]); // error, too few elements in array passed to a tuple
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* @flow */
// error, too few elements in array passed to a tuple
function foo(a: [Object, Object]) {
  
}
foo([ {} ]);
"
`;

exports[`test tuples.js 1`] = `
"var a: [] = [];
var b: [] = [123]; // Error - arity mismatch
var c: [number] = []; // nope
var d: [number, string] = [123,\'duck\'];
var e: [number, string,] = [123,\'duck\'];
var f: [number, string] = [123, 456];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Error - arity mismatch
// nope
var a: [] = [  ];
var b: [] = [ 123 ];
var c: [number] = [  ];
var d: [number, string] = [ 123, \"duck\" ];
var e: [number, string] = [ 123, \"duck\" ];
var f: [number, string] = [ 123, 456 ];
"
`;
