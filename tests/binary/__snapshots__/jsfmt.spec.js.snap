exports[`test in.js 1`] = `
"// @flow

let tests = [
  // objects on RHS
  function() {
    (\'foo\' in {});
    (\'foo\' in { foo: null });
    (0 in {});
    (0 in { \"0\": null });
  },

  // arrays on RHS
  function() {
    (\'foo\' in []);
    (0 in []);
    (\'length\' in []);
  },

  // primitive classes on RHS
  function() {
    (\'foo\' in new String(\'bar\'));
    (\'foo\' in new Number(123));
  },

  // primitives on RHS
  function() {
    (\'foo\' in 123); // error
    (\'foo\' in \'bar\'); // error
    (\'foo\' in void 0); // error
    (\'foo\' in null); // error
  },

  // bogus stuff on LHS
  function() {
    (null in {}); // error
    (void 0 in {}); // error
    ({} in {}); // error
    ([] in {}); // error
    (false in []); // error
  },

  // in predicates
  function() {
    if (\'foo\' in 123) {} // error
    if (!\'foo\' in {}) {} // error, !\'foo\' is a boolean
    if (!(\'foo\' in {})) {}
  },

  // annotations on RHS
  function(x: Object, y: mixed) {
    (\'foo\' in x); // ok
    (\'foo\' in y); // error
  },
]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// @flow
// objects on RHS
// arrays on RHS
// primitive classes on RHS
// primitives on RHS
// error
// error
// error
// error
// bogus stuff on LHS
// error
// error
// error
// error
// error
// in predicates
// error
// error, !\'foo\' is a boolean
// annotations on RHS
// ok
// error
let tests = [
  function() {
    \"foo\" in {};

    \"foo\" in { foo: null };

    0 in {};

    0 in { \"0\": null };
  },
  function() {
    \"foo\" in [];

    0 in [];

    \"length\" in [];
  },
  function() {
    \"foo\" in new String(\"bar\");

    \"foo\" in new Number(123);
  },
  function() {
    \"foo\" in 123;

    \"foo\" in \"bar\";

    \"foo\" in void 0;

    \"foo\" in null;
  },
  function() {
    null in {};

    void 0 in {};

    ({}) in {};

    [] in {};

    false in [];
  },
  function() {
    if (\"foo\" in 123)
      {}

    if (!\"foo\" in {})
      {}

    if (!(\"foo\" in {}))
      {}
  },
  function(x: Object, y: mixed) {
    \"foo\" in x;

    \"foo\" in y;
  }
];
"
`;
